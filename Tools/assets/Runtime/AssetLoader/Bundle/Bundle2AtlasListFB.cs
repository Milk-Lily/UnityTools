// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Zeus.Framework.Asset
{

using global::System;
using global::System.Collections.Generic;
using global::ZeusFlatBuffers;

public struct Bundle2AtlasListFB : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Bundle2AtlasListFB GetRootAsBundle2AtlasListFB(ByteBuffer _bb) { return GetRootAsBundle2AtlasListFB(_bb, new Bundle2AtlasListFB()); }
  public static Bundle2AtlasListFB GetRootAsBundle2AtlasListFB(ByteBuffer _bb, Bundle2AtlasListFB obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Bundle2AtlasListFB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Zeus.Framework.Asset.Bundle2AtlasFB? B2A(int j) { int o = __p.__offset(4); return o != 0 ? (Zeus.Framework.Asset.Bundle2AtlasFB?)(new Zeus.Framework.Asset.Bundle2AtlasFB()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int B2ALength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Zeus.Framework.Asset.Bundle2AtlasListFB> CreateBundle2AtlasListFB(FlatBufferBuilder builder,
      VectorOffset b2AOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Bundle2AtlasListFB.AddB2A(builder, b2AOffset);
    return Bundle2AtlasListFB.EndBundle2AtlasListFB(builder);
  }

  public static void StartBundle2AtlasListFB(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddB2A(FlatBufferBuilder builder, VectorOffset b2AOffset) { builder.AddOffset(0, b2AOffset.Value, 0); }
  public static VectorOffset CreateB2AVector(FlatBufferBuilder builder, Offset<Zeus.Framework.Asset.Bundle2AtlasFB>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateB2AVectorBlock(FlatBufferBuilder builder, Offset<Zeus.Framework.Asset.Bundle2AtlasFB>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartB2AVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Zeus.Framework.Asset.Bundle2AtlasListFB> EndBundle2AtlasListFB(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Zeus.Framework.Asset.Bundle2AtlasListFB>(o);
  }
  public static void FinishBundle2AtlasListFBBuffer(FlatBufferBuilder builder, Offset<Zeus.Framework.Asset.Bundle2AtlasListFB> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedBundle2AtlasListFBBuffer(FlatBufferBuilder builder, Offset<Zeus.Framework.Asset.Bundle2AtlasListFB> offset) { builder.FinishSizePrefixed(offset.Value); }
};

public struct Bundle2AtlasFB : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Bundle2AtlasFB GetRootAsBundle2AtlasFB(ByteBuffer _bb) { return GetRootAsBundle2AtlasFB(_bb, new Bundle2AtlasFB()); }
  public static Bundle2AtlasFB GetRootAsBundle2AtlasFB(ByteBuffer _bb, Bundle2AtlasFB obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Bundle2AtlasFB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Bundle { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBundleBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetBundleBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetBundleArray() { return __p.__vector_as_array<byte>(4); }
  public string Atlas(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AtlasLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Zeus.Framework.Asset.Bundle2AtlasFB> CreateBundle2AtlasFB(FlatBufferBuilder builder,
      StringOffset bundleOffset = default(StringOffset),
      VectorOffset atlasOffset = default(VectorOffset)) {
    builder.StartTable(2);
    Bundle2AtlasFB.AddAtlas(builder, atlasOffset);
    Bundle2AtlasFB.AddBundle(builder, bundleOffset);
    return Bundle2AtlasFB.EndBundle2AtlasFB(builder);
  }

  public static void StartBundle2AtlasFB(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddBundle(FlatBufferBuilder builder, StringOffset bundleOffset) { builder.AddOffset(0, bundleOffset.Value, 0); }
  public static void AddAtlas(FlatBufferBuilder builder, VectorOffset atlasOffset) { builder.AddOffset(1, atlasOffset.Value, 0); }
  public static VectorOffset CreateAtlasVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAtlasVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAtlasVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Zeus.Framework.Asset.Bundle2AtlasFB> EndBundle2AtlasFB(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Zeus.Framework.Asset.Bundle2AtlasFB>(o);
  }
};


}

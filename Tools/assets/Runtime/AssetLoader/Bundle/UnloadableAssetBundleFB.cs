// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Zeus.Framework.Asset
{

using global::System;
using global::System.Collections.Generic;
using global::ZeusFlatBuffers;

public struct UnloadbleAssetBundle : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static UnloadbleAssetBundle GetRootAsUnloadbleAssetBundle(ByteBuffer _bb) { return GetRootAsUnloadbleAssetBundle(_bb, new UnloadbleAssetBundle()); }
  public static UnloadbleAssetBundle GetRootAsUnloadbleAssetBundle(ByteBuffer _bb, UnloadbleAssetBundle obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UnloadbleAssetBundle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Bundles(int j) { int o = __p.__offset(4); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int BundlesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Zeus.Framework.Asset.UnloadbleAssetBundle> CreateUnloadbleAssetBundle(FlatBufferBuilder builder,
      VectorOffset bundlesOffset = default(VectorOffset)) {
    builder.StartTable(1);
    UnloadbleAssetBundle.AddBundles(builder, bundlesOffset);
    return UnloadbleAssetBundle.EndUnloadbleAssetBundle(builder);
  }

  public static void StartUnloadbleAssetBundle(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddBundles(FlatBufferBuilder builder, VectorOffset bundlesOffset) { builder.AddOffset(0, bundlesOffset.Value, 0); }
  public static VectorOffset CreateBundlesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBundlesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBundlesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Zeus.Framework.Asset.UnloadbleAssetBundle> EndUnloadbleAssetBundle(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Zeus.Framework.Asset.UnloadbleAssetBundle>(o);
  }
  public static void FinishUnloadbleAssetBundleBuffer(FlatBufferBuilder builder, Offset<Zeus.Framework.Asset.UnloadbleAssetBundle> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedUnloadbleAssetBundleBuffer(FlatBufferBuilder builder, Offset<Zeus.Framework.Asset.UnloadbleAssetBundle> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
